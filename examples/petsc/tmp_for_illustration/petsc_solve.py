from devito import *
from devito.types import PETScSolve

# Corresponding c code generated by 'op' is found in petsc_solve.c
# This is just temporary - just illustrating the current
# functionality of PETScSolve alongside the lower_petsc pass.

grid = Grid(shape=(11, 11), extent=(1., 1.))

u = TimeFunction(name='u', grid=grid, space_order=2)
v = TimeFunction(name='v', grid=grid, space_order=2)
pn = Function(name='pn', grid=grid, space_order=2)

eq_pn = Eq(pn.laplace, u.dxc+v.dyc)

petsc = PETScSolve(eq_pn, pn)

eq_u = Eq(u.dt + v*u.dyc - pn.dxc)
eq_v = Eq(v.dt + u*v.dxc - pn.dyc)

update_u = Eq(u.forward, solve(eq_u, u.forward))
update_v = Eq(v.forward, solve(eq_v, v.forward))

# # Create the operator
exprs = petsc + [update_u, update_v]

op = Operator(exprs, opt='noop')
print(op.ccode)
# See petsc_solve.c for corresponding C code
