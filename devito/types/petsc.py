from devito.tools import CustomDtype, dtype_to_ctype
from devito.types import LocalObject, CompositeObject
from devito.types.basic import Symbol
from devito.types.array import ArrayBasic
import numpy as np
from cached_property import cached_property
from devito.types.equation import Eq

__all__ = ['PETScSolve']


class DM(LocalObject):
    """
    PETSc Data Management object (DM).
    """
    dtype = CustomDtype('DM')


class Mat(LocalObject):
    """
    PETSc Matrix object (Mat).
    """
    dtype = CustomDtype('Mat')


class Vec(LocalObject):
    """
    PETSc Vector object (Vec).
    """
    dtype = CustomDtype('Vec')


class PetscMPIInt(LocalObject):
    """
    PETSc datatype used to represent `int` parameters
    to MPI functions.
    """
    dtype = CustomDtype('PetscMPIInt')


class KSP(LocalObject):
    """
    PETSc KSP : Linear Systems Solvers.
    Manages Krylov Methods.
    """
    dtype = CustomDtype('KSP')


class PC(LocalObject):
    """
    PETSc object that manages all preconditioners (PC).
    """
    dtype = CustomDtype('PC')


class KSPConvergedReason(LocalObject):
    """
    PETSc object - reason a Krylov method was determined
    to have converged or diverged.
    """
    dtype = CustomDtype('KSPConvergedReason')


class PetscErrorCode(LocalObject):
    """
    PETSc datatype used to return PETSc error codes.
    https://petsc.org/release/manualpages/Sys/PetscErrorCode/
    """
    dtype = CustomDtype('PetscErrorCode')


class PETScArray(ArrayBasic):
    """
    PETScArrays are generated by the compiler only and represent
    a customised variant of ArrayBasic. They are designed to
    avoid generating a cast in the low-level code.
    """

    _data_alignment = False

    __rkwargs__ = (ArrayBasic.__rkwargs__ +
                   ('liveness',))

    def __init_finalize__(self, *args, **kwargs):
        super().__init_finalize__(*args, **kwargs)

        self._liveness = kwargs.get('liveness', 'lazy')
        assert self._liveness in ['eager', 'lazy']

    @classmethod
    def __dtype_setup__(cls, **kwargs):
        return kwargs.get('dtype', np.float32)

    @cached_property
    def _C_ctype(self):
        petsc_type = dtype_to_petsctype(self.dtype)
        modifier = '*' * len(self.dimensions)
        return CustomDtype(petsc_type, modifier=modifier)

    @property
    def _C_name(self):
        return self.name

    @property
    def liveness(self):
        return self._liveness

    @property
    def _mem_internal_eager(self):
        return self._liveness == 'eager'

    @property
    def _mem_internal_lazy(self):
        return self._liveness == 'lazy'


def dtype_to_petsctype(dtype):
    """
    Map numpy types to PETSc datatypes.

    TODO: If a user creates an object e.g a Function with
    double precision but their PETSc is configured to single
    precision then throw a warning etc.
    """
    return {
        np.int32: 'PetscInt',
        np.float32: 'PetscScalar',
        np.int64: 'PetscInt',
        np.float64: 'PetscScalar'
    }[dtype]


class Action(Eq):
    """
    Represents the mathematical expression of applying a linear
    operator to a vector. This is a key component
    for running matrix-free solvers.
    """

    __rkwargs__ = (Eq.__rkwargs__ + ('target',))

    def __new__(cls, lhs, rhs=0, subdomain=None, coefficients=None, implicit_dims=None,
                target=None, **kwargs):
        obj = Eq.__new__(cls, lhs, rhs, subdomain=subdomain, coefficients=coefficients,
                         implicit_dims=implicit_dims, **kwargs)
        obj._target = target

        return obj
    
    @property
    def target(self):
        return self._target



class RHS(Eq):
    """
    Represents the mathematical expression of building the
    rhs of a linear system.
    """
    pass


class PreStencil(Eq):
    """
    Eq needed for the preconditioner callback.
    """
    pass


class PETScDummy(Eq):
    """
    Dummy Eq which will be replaced with the PETSc calls to
    execute the linear solve.
    """
    pass


def PETScSolve(eq, target, bcs=None, **kwargs):

    yvec_tmp = PETScArray(name='yvec_tmp', dtype=target.dtype,
                          dimensions=target.dimensions,
                          shape=target.shape, liveness='eager')

    b_tmp = PETScArray(name='b_tmp', dtype=target.dtype,
                       dimensions=target.dimensions,
                       shape=target.shape, liveness='eager')

    # TODO: Extend to different preconditioners but for now just considering
    # JACOBI diagonal.
    from devito import Derivative
    terms = eq.lhs.as_ordered_terms()
    centre_stencil = sum(
        [d._eval_deriv_centre for d in terms if isinstance(d, Derivative)])

    # For now, assume the application of the linear operator on
    # a vector is eqn.lhs

    from devito.types import Symbol
    s0 = Symbol(name='s0')
    s1 = Symbol(name='s1')
    from devito.types import CriticalRegion

    from devito.symbolics import uxreplace

    # from IPython import embed; embed()
    # The equations that are supplied to callback functions will
    # always have to be in separated loops. 

    preconditioner = [Eq(s0, CriticalRegion(True)),
                      PreStencil(yvec_tmp, centre_stencil),
                      Eq(s1, CriticalRegion(True))]

    action = [Eq(s0, CriticalRegion(True)),
              Action(yvec_tmp, eq.lhs, target=target),
              Eq(s1, CriticalRegion(True))]

    # from IPython import embed; embed()

    rhs = RHS(b_tmp, eq.rhs)

    # Create Dummy equation to separate RHS equation from the rest. 
    tmp = Symbol('tmp')
    indices = tuple(d + 1 for d in b_tmp.dimensions)
    if any(d.is_Time for d in eq.rhs.dimensions):
        dummy = Eq(tmp, b_tmp.indexify(indices=indices)*target.grid.time_dim)
    else:
        dummy = Eq(tmp, b_tmp.indexify(indices=indices))
    
    return preconditioner + action + [rhs] + [dummy]


def inject_dummy(expressions, **kwargs):

    # Always create dummy alongside RHS expression to force separate it from
    # other equations.

    tmp = Symbol('tmp')
    modified_exprs = []
    for expr in expressions:
        modified_exprs.append(expr)
        if isinstance(expr, RHS):
            indices = tuple(d + 1 for d in expr.lhs.function.dimensions)
            dummy = PETScDummy(tmp, expr.lhs.function.indexify(indices=indices)*expr.rhs)
            modified_exprs.append(dummy)

    return tuple(modified_exprs)


class PETScStruct(CompositeObject):

    __rargs__ = ('name', 'usr_ctx',)

    def __init__(self, name, usr_ctx):
        pfields = [(i._C_name,
                    dtype_to_ctype(i.dtype)) for i in usr_ctx if isinstance(i, Symbol)]
        self._usr_ctx = usr_ctx
        super().__init__(name, 'MatContext', pfields)

    @property
    def usr_ctx(self):
        return self._usr_ctx

    def _arg_values(self, **kwargs):
        values = super()._arg_values(**kwargs)
        for i in self.fields:
            setattr(values[self.name]._obj, i, kwargs['args'][i])
        return values
