from devito.tools import CustomDtype, dtype_to_ctype
from devito.types import LocalObject, CompositeObject
from devito.types.basic import Symbol
from devito.types.array import ArrayBasic
import numpy as np
from cached_property import cached_property
from devito.types.equation import Eq

__all__ = ['PETScSolve']


class DM(LocalObject):
    """
    PETSc Data Management object (DM).
    """
    dtype = CustomDtype('DM')


class Mat(LocalObject):
    """
    PETSc Matrix object (Mat).
    """
    dtype = CustomDtype('Mat')


class Vec(LocalObject):
    """
    PETSc Vector object (Vec).
    """
    dtype = CustomDtype('Vec')


class PetscMPIInt(LocalObject):
    """
    PETSc datatype used to represent `int` parameters
    to MPI functions.
    """
    dtype = CustomDtype('PetscMPIInt')


class KSP(LocalObject):
    """
    PETSc KSP : Linear Systems Solvers.
    Manages Krylov Methods.
    """
    dtype = CustomDtype('KSP')


class PC(LocalObject):
    """
    PETSc object that manages all preconditioners (PC).
    """
    dtype = CustomDtype('PC')


class KSPConvergedReason(LocalObject):
    """
    PETSc object - reason a Krylov method was determined
    to have converged or diverged.
    """
    dtype = CustomDtype('KSPConvergedReason')


class PetscErrorCode(LocalObject):
    """
    PETSc datatype used to return PETSc error codes.
    https://petsc.org/release/manualpages/Sys/PetscErrorCode/
    """
    dtype = CustomDtype('PetscErrorCode')


class PETScArray(ArrayBasic):
    """
    PETScArrays are generated by the compiler only and represent
    a customised variant of ArrayBasic. They are designed to
    avoid generating a cast in the low-level code.
    """

    _data_alignment = False

    @classmethod
    def __dtype_setup__(cls, **kwargs):
        return kwargs.get('dtype', np.float32)

    @cached_property
    def _C_ctype(self):
        petsc_type = dtype_to_petsctype(self.dtype)
        modifier = '*' * len(self.dimensions)
        return CustomDtype(petsc_type, modifier=modifier)

    @property
    def _C_name(self):
        return self.name


def dtype_to_petsctype(dtype):
    """
    Map numpy types to PETSc datatypes.

    TODO: If a user creates an object e.g a Function with
    double precision but their PETSc is configured to single
    precision then throw a warning etc.
    """
    return {
        np.int32: 'PetscInt',
        np.float32: 'PetscScalar',
        np.int64: 'PetscInt',
        np.float64: 'PetscScalar'
    }[dtype]


class Action(Eq):
    """
    Represents the mathematical expression of applying a linear
    operator to a vector. This is a key component
    for running matrix-free solvers.
    """
    pass


class Solution(Eq):
    """
    """
    pass


def PETScSolve(eq, target, **kwargs):

    yvec_tmp = PETScArray(name='yvec_tmp', dtype=target.dtype,
                          dimensions=target.dimensions,
                          shape=target.shape, liveness='eager')

    solution_tmp = PETScArray(name='solution_tmp', dtype=target.dtype,
                              dimensions=target.dimensions,
                              shape=target.shape, liveness='eager')

    # For now, assume the application of the linear operator on
    # a vector is eqn.lhs
    action = Action(yvec_tmp, eq.lhs.evaluate)

    solution = Solution(target, solution_tmp)

    return [action] + [solution]


class PETScStruct(CompositeObject):

    __rargs__ = ('name', 'usr_ctx',)

    def __init__(self, name, usr_ctx):
        pfields = [(i._C_name,
                    dtype_to_ctype(i.dtype)) for i in usr_ctx if isinstance(i, Symbol)]
        self._usr_ctx = usr_ctx
        super().__init__(name, 'MatContext', pfields)

    @property
    def usr_ctx(self):
        return self._usr_ctx

    def _arg_values(self, **kwargs):
        values = super()._arg_values(**kwargs)
        for i in self.fields:
            setattr(values[self.name]._obj, i, kwargs['args'][i])
        return values
